---
import Ring from './loading/Ring.astro';

const RING_NUM = 10;
const RING_TYPES = ['x', 'y'];
---

<div class="loading">
  <div class="corner">
    <div class="corner-top-right"></div>
    <div class="corner-bottom-right"></div>
    <div class="corner-bottom-left"></div>
    <div class="corner-top-left"></div>
  </div>
  <div class="center">
    {
      [...Array(RING_NUM)].map((_, i) =>
        RING_TYPES.map((v, l) => (
          <Ring l={l} i={i} v={v} num={RING_NUM * RING_TYPES.length} />
        )),
      )
    }
  </div>
</div>

<style lang="scss">
  .loading {
    position: fixed;
    top: 0;
    left: 0;
    z-index: 10000;
    width: 100%;
    height: 100%;
    pointer-events: none;
    opacity: 1;
    transition-duration: 0.2s;
    transition-property: opacity;
  }

  .corner {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transform: scale(1);
    transition-duration: 0.2s;
    transition-property: transform;

    & > div {
      position: absolute;
      width: 10vmin;
      height: 10vmin;

      &::before,
      &::after {
        position: absolute;
        width: 100%;
        height: 10px;
        content: '';
        background-color: white;
        transform-origin: top left;
      }
    }

    &-top-right {
      top: 0;
      right: 0;

      &::before {
        top: 0;
        left: 0;
      }

      &::after {
        top: 0;
        left: 100%;
        transform: rotate(90deg);
      }
    }

    &-bottom-right {
      right: 0;
      bottom: 0;

      &::before {
        bottom: 0;
        left: 0;
      }

      &::after {
        top: 0;
        left: 100%;
        transform: rotate(90deg);
      }
    }

    &-bottom-left {
      bottom: 0;
      left: 0;

      &::before {
        bottom: 0;
        left: 0;
      }

      &::after {
        bottom: 0;
        left: 0;
        transform: rotate(-90deg);
      }
    }

    &-top-left {
      top: 0;
      left: 0;

      &::before {
        top: 0;
        left: 0;
      }

      &::after {
        bottom: 0;
        left: 0;
        transform: rotate(-90deg);
      }
    }
  }

  .center {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 10vmin;
    height: 10vmin;
    transform: translate(-50%, -50%);
  }

  body[data-loaded='true'] {
    .loading {
      opacity: 0;
    }

    .corner {
      transform: scale(1.2);
    }
  }
</style>
